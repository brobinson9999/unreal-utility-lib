class QueuedEvent extends BaseObject;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

var float             time;             // Time that this event occurs at.
var QueuedEvent       next;             // Next event.

// Reference to the BaseObject requesting the callback.
// This prevents garbage collection while we still have an event pending on that object. (20100306: is this an issue?)
// It is also used when profiling to assign time spend handling callbacks to the events that requested those callbacks.
// It also allows us to determine if that object is no longer relevant, but we shouldn't ever need to do that.
var BaseObject        callBackTarget;

// If true, the event queue will cleanup and free this event after it is processed. If false, the object should be cleaned up externally.
// Since objects often clean up their events when they are cleaned up, this flag is set to false when the event is cleaned up. This prevents
// it being freed twice which can lead to it being allocated twice later.
var bool bCleanupAfterProcessing; 

delegate callBack();       // Callback for this event.


// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function processEvent() {
  callBack();
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function cleanup()
{
  next = none;
  callback = none;
  callbackTarget = none;
  bCleanupAfterProcessing = false;

  super.cleanup();
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
}