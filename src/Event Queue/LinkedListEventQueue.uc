class LinkedListEventQueue extends EventQueue;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  var     QueuedEvent         head;           // First event in this queue.
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function queueEvent(QueuedEvent X)
  {
    local QueuedEvent Y;
    
    // If list is blank, just start it out here.
    if (Head == None)
    {
      Head = X;
      return;
    }
    
    // If this event occurs before any other event in the list, set it as the head.
    if (X.Time < Head.Time)
    {
      X.Next = Head;
      Head = X;
      return;
    }
    
    // Otherwise, walk the list to find the place for this.
    Y = Head;
    while (true)
    {
      // Append to the end if the end of the queue is reached.
      if (Y.Next == None)
      {
        Y.Next = X;
        return;
      }
      
      // Check for insertion.
      if (X.Time < Y.Next.Time)
      {
        X.Next = Y.Next;
        Y.Next = X;
        return;
      }
      
      // Continue.
      Y = Y.Next;
    }
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function removeEvent(QueuedEvent X)
  {
    local QueuedEvent LastEvent;
    local QueuedEvent Y;
    
    if (Head == None)
      return;
      
    Y = Head;
    LastEvent = None;
    while(Y != None)
    {
      if (Y == X)
      {
        if (LastEvent == None)
          Head = Y.Next;
        else
          LastEvent.Next = Y.Next;
          
        break;
      }
      
      LastEvent = Y;
      Y = Y.Next;
    }

    recycleEvent(X);
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function QueuedEvent getNextEvent() {
    return head;
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function removeNextEvent() {
    local QueuedEvent eventAfterNext;
    
    if (head != none) {
      eventAfterNext = head.next;
      head = eventAfterNext;
    }
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function int getLength() {
    local QueuedEvent cursor;
    local int result;

    cursor = head;
    while (cursor != none)
    {
      result++;
      cursor = cursor.next;
    }
    
    return result;
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function cleanup()
  {
    cleanupQueue(head);
    head = none;
    
    super.cleanup();
  }
  
  simulated function cleanupQueue(QueuedEvent nextEvent)
  {
    local QueuedEvent currentEvent;
    
    while (nextEvent != None)
    { 
      currentEvent = nextEvent;
      nextEvent = currentEvent.next;
      currentEvent.cleanup();
    }
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
}