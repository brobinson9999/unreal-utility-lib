// This is named MyObjectPool to avoid a name conflict with Engine.ObjectPool in UT2004.
class MyObjectPool extends BaseObject;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  var array<object> freeObjects;
  var class<object> objectClass;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function setObjectClass(class<object> newObjectClass) {
    objectClass = newObjectClass;
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function object getInstance() {
    local object result;
    
    if (freeObjects.length > 0) {
      result = freeObjects[freeObjects.length-1];
      freeObjects.remove(freeObjects.length-1,1);
//      if (QueuedEvent(result) != none)
//        debugMSG("allocated from pool "$result);
    } else {
      result = new objectClass;
//      if (QueuedEvent(result) != none)
//        debugMSG("allocated fresh "$result);
    }
    
    return result;
  }
  
  simulated function freeInstance(object freedObject) {
//    debugAssert(!alreadyFreed(freedObject), "MyObjectPool.freeInstance: !alreadyFreed(freedObject)");
    
    freeObjects[freeObjects.length] = freedObject;
  }
  
  simulated function bool alreadyFreed(object freedObject) {
    local int i;
    
    for (i=0;i<freeObjects.length;i++)
      if (freeObjects[i] == freedObject)
        return true;
        
    return false;
  }

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  // doesn't implement a shrink function because normally, garbage collection won't get called during play, so there is no benefit to
  // shrinking and there could be a cost later if we have to re-allocate objects.
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

  simulated function cleanup() {
    if (freeObjects.length > 0)
      freeObjects.remove(0,freeObjects.length);
      
    super.cleanup();
  }
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
}