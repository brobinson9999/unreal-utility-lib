// Contains base code for tallying things.
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

class Tallier extends BaseObject;

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

var array<TallierElement>     Elements;
  
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function Add(coerce string Key, float Value)
{
  local TallierElement Element;
  
  Element = Get_Element(Key);
  Element.Value += Value;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function clear()
{
  while (elements.Length > 0)
  {
    freeAndCleanupObject(elements[0]);
    elements.remove(0, 1);
  }
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function cleanup()
{
  clear();
  
  super.cleanup();
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function Print()
{
  local int i;
  
  for (i=0;i<Elements.Length;i++)
    errorMessage(i$": "$Elements[i].Key$": "$Elements[i].Value);
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function Sort()
{
  local int i, j;
  local array<TallierElement> SortedElements;
  local bool bFound;
  
  for (i=0;i<Elements.Length;i++)
  {
    bFound = false;
    for (j=0;j<SortedElements.Length;j++)
      if (Elements[i].Value < SortedElements[j].Value)
      {
        SortedElements.Insert(j, 1);
        SortedElements[j] = Elements[i];
        bFound = true;
        break;
      }
    
    if (!bFound)
      SortedElements[SortedElements.Length] = Elements[i];
  }
  
  Elements = SortedElements;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function TallierElement Get_Element(string Key)
{
  local TallierElement Element;

  Element = Get_Element_Existing(Key);
  if (Element != None) return Element;
  
  Element = TallierElement(allocateObjectWithoutPropogation(class'TallierElement'));
  Element.key = key;
  
  Elements[Elements.Length] = Element;
  
  return Element;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

simulated function TallierElement Get_Element_Existing(string Key)
{
  local int i;
  
  for (i=0;i<Elements.Length;i++)
    if (Elements[i].Key ~= Key)
      return Elements[i];
      
  return None;
}

// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************
// ********************************************************************************************************************************************

defaultproperties
{
}